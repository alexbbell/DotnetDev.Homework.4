// <auto-generated />
using System;
using DBManager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DBManager.Migrations
{
    [DbContext(typeof(DBManagerContext))]
    partial class DBManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DBManager.NewTable", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("newtable");
                });

            modelBuilder.Entity("DBManager.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("PaymentSum")
                        .HasColumnType("double precision");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Payments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccountId = 1,
                            PaymentDate = new DateTime(2022, 9, 2, 6, 59, 42, 223, DateTimeKind.Local).AddTicks(8031),
                            PaymentSum = 200.0,
                            PaymentType = "in"
                        },
                        new
                        {
                            Id = 2,
                            AccountId = 2,
                            PaymentDate = new DateTime(2022, 9, 2, 6, 59, 42, 223, DateTimeKind.Local).AddTicks(8041),
                            PaymentSum = 200.0,
                            PaymentType = "out"
                        },
                        new
                        {
                            Id = 3,
                            AccountId = 2,
                            PaymentDate = new DateTime(2022, 9, 2, 6, 59, 42, 223, DateTimeKind.Local).AddTicks(8042),
                            PaymentSum = 200.0,
                            PaymentType = "in"
                        },
                        new
                        {
                            Id = 4,
                            AccountId = 5,
                            PaymentDate = new DateTime(2022, 9, 2, 6, 59, 42, 223, DateTimeKind.Local).AddTicks(8043),
                            PaymentSum = 200.0,
                            PaymentType = "out"
                        },
                        new
                        {
                            Id = 5,
                            AccountId = 1,
                            PaymentDate = new DateTime(2022, 9, 2, 6, 59, 42, 223, DateTimeKind.Local).AddTicks(8043),
                            PaymentSum = 200.0,
                            PaymentType = "in"
                        });
                });

            modelBuilder.Entity("DBManager.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Birthdate = new DateTime(1981, 3, 14, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Beliaev",
                            MiddleName = "Borisovich",
                            Name = "Aleksei"
                        },
                        new
                        {
                            Id = 2,
                            Birthdate = new DateTime(1979, 8, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Beliaeva",
                            MiddleName = "Borisovna",
                            Name = "Dina"
                        },
                        new
                        {
                            Id = 3,
                            Birthdate = new DateTime(2020, 2, 25, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Beliaev",
                            MiddleName = "Alekseevich",
                            Name = "Ian"
                        },
                        new
                        {
                            Id = 4,
                            Birthdate = new DateTime(2006, 12, 9, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Beliaev",
                            MiddleName = "Alekseevich",
                            Name = "Mark"
                        },
                        new
                        {
                            Id = 5,
                            Birthdate = new DateTime(2009, 2, 27, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            LastName = "Beliaev",
                            MiddleName = "Alekseevna",
                            Name = "Marta"
                        });
                });

            modelBuilder.Entity("DBManager.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DateCreation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Currency = "USD",
                            DateCreation = "2021-12-14",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Currency = "EUR",
                            DateCreation = "2021-12-14",
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Currency = "RUB",
                            DateCreation = "2021-12-14",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Currency = "USD",
                            DateCreation = "2021-12-14",
                            UserId = 2
                        },
                        new
                        {
                            Id = 5,
                            Currency = "EUR",
                            DateCreation = "2021-12-14",
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            Currency = "RUB",
                            DateCreation = "2021-12-14",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("DBManager.Payment", b =>
                {
                    b.HasOne("DBManager.UserAccount", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DBManager.UserAccount", b =>
                {
                    b.HasOne("DBManager.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
